name: Scheduled Environment Cleanup

on:
  schedule:
    # ÊØéÊó•ÂçàÂâç2ÊôÇ(JST)„Å´ÂÆüË°å (UTC 17:00)
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      days_old:
        description: '‰ΩïÊó•‰ª•‰∏äÂè§„ÅÑ„Çµ„Éº„Éì„Çπ„ÇíÂâäÈô§„Åô„Çã„Åã'
        required: false
        type: number
        default: 7
      dry_run:
        description: '„Éâ„É©„Ç§„É©„É≥ÔºàÂÆüÈöõ„Å´„ÅØÂâäÈô§„Åó„Å™„ÅÑÔºâ'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write
  issues: write

env:
  REGION: asia-northeast1
  BASE_SERVICE: x-fact-checker

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
        project_id: ${{ secrets.PROJECT_ID }}

    - uses: google-github-actions/setup-gcloud@v2

    - name: Set cleanup parameters
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "DAYS_OLD=${{ github.event.inputs.days_old }}" >> $GITHUB_ENV
          echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_ENV
        else
          echo "DAYS_OLD=7" >> $GITHUB_ENV
          echo "DRY_RUN=false" >> $GITHUB_ENV
        fi

    - name: Find PR services
      id: find-services
      run: |
        echo "üîç PRÈñ¢ÈÄ£„ÅÆCloud Run„Çµ„Éº„Éì„Çπ„ÇíÊ§úÁ¥¢‰∏≠..."
        
        # PRÈñ¢ÈÄ£„ÅÆ„Çµ„Éº„Éì„Çπ„ÇíÊ§úÁ¥¢
        SERVICES=$(gcloud run services list \
          --region="$REGION" \
          --filter="metadata.name~^${BASE_SERVICE}-pr-[0-9]+$" \
          --format="csv[no-heading](metadata.name,metadata.creationTimestamp)" \
          2>/dev/null || echo "")
        
        if [ -z "$SERVICES" ]; then
          echo "services_found=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è PRÈñ¢ÈÄ£„ÅÆ„Çµ„Éº„Éì„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü"
          exit 0
        fi
        
        echo "services_found=true" >> $GITHUB_OUTPUT
        echo "Found services:"
        echo "$SERVICES"
        
        # Âè§„ÅÑ„Çµ„Éº„Éì„Çπ„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        CUTOFF_DATE=$(date -d "$DAYS_OLD days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "Cutoff date: $CUTOFF_DATE"
        
        OLD_SERVICES=""
        while IFS=, read -r service_name creation_time; do
          if [ "$creation_time" \< "$CUTOFF_DATE" ]; then
            OLD_SERVICES="$OLD_SERVICES$service_name,$creation_time\n"
          fi
        done <<< "$SERVICES"
        
        if [ -z "$OLD_SERVICES" ]; then
          echo "old_services_found=false" >> $GITHUB_OUTPUT
          echo "‚úÖ ÂâäÈô§ÂØæË±°„ÅÆÂè§„ÅÑ„Çµ„Éº„Éì„Çπ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü"
        else
          echo "old_services_found=true" >> $GITHUB_OUTPUT
          echo -e "$OLD_SERVICES" > /tmp/old_services.txt
          echo "ÂâäÈô§ÂØæË±°„ÅÆ„Çµ„Éº„Éì„Çπ:"
          cat /tmp/old_services.txt
        fi

    - name: Create cleanup summary
      if: steps.find-services.outputs.old_services_found == 'true'
      id: summary
      run: |
        echo "## üßπ ÂÆöÊúü„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„É¨„Éù„Éº„Éà" > /tmp/cleanup_report.md
        echo "" >> /tmp/cleanup_report.md
        echo "**ÂÆüË°åÊó•ÊôÇ**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> /tmp/cleanup_report.md
        echo "**ÂÆüË°å„É¢„Éº„Éâ**: $( [ \"$DRY_RUN\" = \"true\" ] && echo \"„Éâ„É©„Ç§„É©„É≥\" || echo \"ÂÆüÈöõ„ÅÆÂâäÈô§\" )" >> /tmp/cleanup_report.md
        echo "**ÂâäÈô§Âü∫Ê∫ñ**: ${DAYS_OLD}Êó•‰ª•‰∏äÂâç„Å´‰ΩúÊàê„Åï„Çå„Åü„Çµ„Éº„Éì„Çπ" >> /tmp/cleanup_report.md
        echo "" >> /tmp/cleanup_report.md
        echo "### ÂâäÈô§ÂØæË±°„Çµ„Éº„Éì„Çπ" >> /tmp/cleanup_report.md
        echo "" >> /tmp/cleanup_report.md
        echo "| „Çµ„Éº„Éì„ÇπÂêç | ‰ΩúÊàêÊó•ÊôÇ | PRÁï™Âè∑ |" >> /tmp/cleanup_report.md
        echo "|-----------|----------|--------|" >> /tmp/cleanup_report.md
        
        while IFS=, read -r service_name creation_time; do
          PR_NUMBER=$(echo "$service_name" | sed "s/${BASE_SERVICE}-pr-//")
          echo "| \`$service_name\` | $creation_time | #$PR_NUMBER |" >> /tmp/cleanup_report.md
        done < /tmp/old_services.txt
        
        echo "" >> /tmp/cleanup_report.md

    - name: Delete old services
      if: steps.find-services.outputs.old_services_found == 'true'
      run: |
        DELETED_COUNT=0
        FAILED_COUNT=0
        
        while IFS=, read -r service_name creation_time; do
          echo "üóëÔ∏è Âá¶ÁêÜ‰∏≠: $service_name (‰ΩúÊàê: $creation_time)"
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "   [„Éâ„É©„Ç§„É©„É≥] ÂâäÈô§ÂØæË±°„Å®„Åó„Å¶Ê§úÂá∫"
            DELETED_COUNT=$((DELETED_COUNT + 1))
          else
            if gcloud run services delete "$service_name" --region="$REGION" --quiet 2>/dev/null; then
              echo "   ‚úÖ ÂâäÈô§ÂÆå‰∫Ü"
              DELETED_COUNT=$((DELETED_COUNT + 1))
            else
              echo "   ‚ùå ÂâäÈô§Â§±Êïó"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
          fi
        done < /tmp/old_services.txt
        
        echo "DELETED_COUNT=$DELETED_COUNT" >> $GITHUB_ENV
        echo "FAILED_COUNT=$FAILED_COUNT" >> $GITHUB_ENV
        
        echo "" >> /tmp/cleanup_report.md
        echo "### ÂÆüË°åÁµêÊûú" >> /tmp/cleanup_report.md
        echo "" >> /tmp/cleanup_report.md
        echo "- **ÂâäÈô§ÊàêÂäü**: ${DELETED_COUNT}‰ª∂" >> /tmp/cleanup_report.md
        echo "- **ÂâäÈô§Â§±Êïó**: ${FAILED_COUNT}‰ª∂" >> /tmp/cleanup_report.md
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "" >> /tmp/cleanup_report.md
          echo "> ‚ö†Ô∏è **„Éâ„É©„Ç§„É©„É≥„É¢„Éº„Éâ**: ÂÆüÈöõ„ÅÆ„Çµ„Éº„Éì„ÇπÂâäÈô§„ÅØË°å„Çè„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü" >> /tmp/cleanup_report.md
        fi

    - name: Create GitHub issue for cleanup report
      if: steps.find-services.outputs.old_services_found == 'true' && env.DRY_RUN == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportContent = fs.readFileSync('/tmp/cleanup_report.md', 'utf8');
          
          const title = `üßπ ÂÆöÊúü„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„É¨„Éù„Éº„Éà - ${new Date().toISOString().split('T')[0]}`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: reportContent,
            labels: ['automation', 'cleanup']
          });

    - name: Output summary
      if: always()
      run: |
        echo "## ÂÆöÊúü„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„Éº" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **ÂÆüË°åÊó•ÊôÇ**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "- **ÂâäÈô§Âü∫Ê∫ñ**: ${DAYS_OLD}Êó•‰ª•‰∏äÂâç" >> $GITHUB_STEP_SUMMARY
        echo "- **„Éâ„É©„Ç§„É©„É≥**: $DRY_RUN" >> $GITHUB_STEP_SUMMARY
        echo "- **PRÈñ¢ÈÄ£„Çµ„Éº„Éì„ÇπÊ§úÂá∫**: ${{ steps.find-services.outputs.services_found }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ÂâäÈô§ÂØæË±°„Çµ„Éº„Éì„Çπ**: ${{ steps.find-services.outputs.old_services_found }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.find-services.outputs.old_services_found }}" = "true" ]; then
          echo "- **ÂâäÈô§ÊàêÂäü**: ${DELETED_COUNT:-0}‰ª∂" >> $GITHUB_STEP_SUMMARY
          echo "- **ÂâäÈô§Â§±Êïó**: ${FAILED_COUNT:-0}‰ª∂" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "/tmp/cleanup_report.md" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat /tmp/cleanup_report.md >> $GITHUB_STEP_SUMMARY
        fi